{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaschnurrenberger/Desktop/HCI_HW3/client/src/login-page.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './login.css';\nimport DropdownSelector from './drop-box-login';\nimport mainScreen from './monitor-screen';\nimport { useNavigate } from \"react-router-dom\"; // Import useHistory\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst patients = [{\n  id: 1,\n  name: 'Sara Norman',\n  additionalInfo: '...'\n}, {\n  id: 2,\n  name: 'Gregg Norman',\n  additionalInfo: '...'\n}\n// Add more patients as necessary\n];\nfunction Login() {\n  _s();\n  const navigate = useNavigate(); // Use the useNavigate hook\n  const [selectedPatientId, setSelectedPatientId] = useState('');\n\n  // Handle the selection change\n  const handleSelectionChange = id => {\n    setSelectedPatientId(id);\n  };\n\n  // Handle the login button click\n  const handleLoginClick = () => {\n    // Assuming the DropdownSelector calls handleSelectionChange when a patient is selected\n    const selectedPatient = patients.find(patient => patient.id.toString() === selectedPatientId);\n    if (selectedPatient) {\n      // Save the selected patient's details for use in the next screen\n      localStorage.setItem('selectedPatient', JSON.stringify(selectedPatient));\n      // Navigate to the monitor screen\n      navigate(mainScreen);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loginpage\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"welc-txt\",\n        children: \"Welcome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"login-to-cont\",\n        children: \"Login to continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DropdownSelector, {\n        patients: patients,\n        onSelectionChange: handleSelectionChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login-btn\",\n        onClick: handleLoginClick,\n        children: \" Login \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"tjLtFzGnai4gQFhftySGx+vnxWM=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","DropdownSelector","mainScreen","useNavigate","jsxDEV","_jsxDEV","patients","id","name","additionalInfo","Login","_s","navigate","selectedPatientId","setSelectedPatientId","handleSelectionChange","handleLoginClick","selectedPatient","find","patient","toString","localStorage","setItem","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelectionChange","onClick","_c","$RefreshReg$"],"sources":["/Users/sofiaschnurrenberger/Desktop/HCI_HW3/client/src/login-page.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './login.css'\nimport DropdownSelector from './drop-box-login'; \nimport mainScreen from './monitor-screen';\n\nimport { useNavigate } from \"react-router-dom\"; // Import useHistory\n\nconst patients = [\n    { id: 1, name: 'Sara Norman', additionalInfo: '...' },\n    { id: 2, name: 'Gregg Norman', additionalInfo: '...' },\n    // Add more patients as necessary\n  ];\n\n  \nfunction Login() {\n    const navigate = useNavigate(); // Use the useNavigate hook\n    const [selectedPatientId, setSelectedPatientId] = useState('');\n\n    // Handle the selection change\n    const handleSelectionChange = (id) => {\n        setSelectedPatientId(id);\n    };\n\n    // Handle the login button click\n    const handleLoginClick = () => {\n        // Assuming the DropdownSelector calls handleSelectionChange when a patient is selected\n        const selectedPatient = patients.find(patient => patient.id.toString() === selectedPatientId);\n        if (selectedPatient) {\n            // Save the selected patient's details for use in the next screen\n            localStorage.setItem('selectedPatient', JSON.stringify(selectedPatient));\n            // Navigate to the monitor screen\n            navigate(mainScreen);\n        }\n    };\n    return (\n    <div className = \"loginpage\"> \n        <div className = \"login-box\"> \n            <p className = \"welc-txt\">Welcome</p>\n            <p className = \"login-to-cont\">Login to continue</p>\n            <DropdownSelector patients={patients}  onSelectionChange={handleSelectionChange}/>\n            <button className = \"login-btn\" onClick = {handleLoginClick}> Login </button> \n        </div> \n    </div>\n    );\n}\n\nexport default Login;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,aAAa;AACpB,OAAOC,gBAAgB,MAAM,kBAAkB;AAC/C,OAAOC,UAAU,MAAM,kBAAkB;AAEzC,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,QAAQ,GAAG,CACb;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,aAAa;EAAEC,cAAc,EAAE;AAAM,CAAC,EACrD;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,cAAc;EAAEC,cAAc,EAAE;AAAM;AACrD;AAAA,CACD;AAGH,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACU,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAE9D;EACA,MAAMe,qBAAqB,GAAIR,EAAE,IAAK;IAClCO,oBAAoB,CAACP,EAAE,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMS,gBAAgB,GAAGA,CAAA,KAAM;IAC3B;IACA,MAAMC,eAAe,GAAGX,QAAQ,CAACY,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACZ,EAAE,CAACa,QAAQ,CAAC,CAAC,KAAKP,iBAAiB,CAAC;IAC7F,IAAII,eAAe,EAAE;MACjB;MACAI,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEC,IAAI,CAACC,SAAS,CAACP,eAAe,CAAC,CAAC;MACxE;MACAL,QAAQ,CAACV,UAAU,CAAC;IACxB;EACJ,CAAC;EACD,oBACAG,OAAA;IAAKoB,SAAS,EAAG,WAAW;IAAAC,QAAA,eACxBrB,OAAA;MAAKoB,SAAS,EAAG,WAAW;MAAAC,QAAA,gBACxBrB,OAAA;QAAGoB,SAAS,EAAG,UAAU;QAAAC,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrCzB,OAAA;QAAGoB,SAAS,EAAG,eAAe;QAAAC,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACpDzB,OAAA,CAACJ,gBAAgB;QAACK,QAAQ,EAAEA,QAAS;QAAEyB,iBAAiB,EAAEhB;MAAsB;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAClFzB,OAAA;QAAQoB,SAAS,EAAG,WAAW;QAACO,OAAO,EAAIhB,gBAAiB;QAAAU,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5E;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACnB,EAAA,CA9BQD,KAAK;EAAA,QACOP,WAAW;AAAA;AAAA8B,EAAA,GADvBvB,KAAK;AAgCd,eAAeA,KAAK;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}